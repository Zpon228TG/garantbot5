from aiogram.dispatcher.filters import BoundFilter
from aiogram.types import Message, CallbackQuery
from src.services.database_service import db_service
from src.helpers import states
from src.config import config
from src.utils import keyboards
from src.config import bot
import aiogram


class UserIsAdmin(BoundFilter):
    async def check(self, msg: CallbackQuery | Message):
        return msg.from_user.id in config.ADMIN_IDS


class UserWithSubscribe(BoundFilter):
    async def check(self, msg: CallbackQuery | Message):
        if await UserIsAdmin().check(msg):
            return True

        db_service.create_user(msg.from_user.id)

        if not await db_service.check_subscription(msg):
            answer = ('üöÄ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É. '
                      '–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É.')
            if type(msg) is CallbackQuery:
                await msg.message.edit_text(text=answer, reply_markup=keyboards.buy_subscription)
            else:
                await msg.answer(text=answer, reply_markup=keyboards.buy_subscription)
            return False
        if db_service.check_user_channel_exists(msg.from_user.id):
            answer = ("üöÄ –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–≤–æ–π –∫–∞–Ω–∞–ª (–≤–∏–¥–∞ <a href='t.me'> https://t.me/...</a> –∏–ª–∏ @ChanelName) "
                      "–∏ —Å–¥–µ–ª–∞–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –Ω—ë–º "
                      f"–∞–∫–∫–∞—É–Ω—Ç @{config.USERBOT_USERNAME}")
            await msg.answer(text=answer)
            await states.Grabber.set_channel.set()

            return False

        return True


class UserIsChannelSubscriber(BoundFilter):
    async def check(self, msg: Message):
        if config.USER_SUBSCRIBE_CHANNEL_ID:
            try:
                is_subscribed = await bot.get_chat_member(config.USER_SUBSCRIBE_CHANNEL_ID, msg.from_user.id)

                if is_subscribed.is_chat_member():
                    if (is_subscribed.status == 'member' or
                            is_subscribed.status == 'administrator' or
                            is_subscribed.status == 'creator'):
                        return True
                await msg.answer('‚ùóÔ∏è –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª',
                                 reply_markup=keyboards.subscribe_channel)
                return False
            except aiogram.utils.exceptions.ChatNotFound:
                user_answer = '‚ùóÔ∏è –í–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞. –ß–∏–Ω–∏–º.'
                admin_answer = '‚ùóÔ∏è –ë–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –∫–∞–Ω–∞–ª'

                await msg.answer(text=user_answer)
                await bot.send_message(chat_id=config.ADMIN_ID,
                                       text=admin_answer)
        else:
            return True
